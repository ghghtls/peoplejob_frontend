name: Frontend CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: 
      - main
    paths:
      - 'frontend/**'

env:
  FLUTTER_VERSION: '3.7.2'
  NODE_VERSION: '18'

jobs:
  # ==================== 테스트 및 빌드 ====================
  test-and-build:
    name: Test and Build Flutter App
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Flutter 환경 설정
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    # 3. 의존성 설치
    - name: Install dependencies
      working-directory: ./frontend
      run: flutter pub get

    # 4. 코드 분석
    - name: Analyze code
      working-directory: ./frontend
      run: flutter analyze

    # 5. 단위 테스트 실행
    - name: Run tests
      working-directory: ./frontend
      run: flutter test --coverage

    # 6. 테스트 커버리지 업로드
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # ==================== Android 빌드 ====================
  build-android:
    name: Build Android APK/AAB
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    # Java 환경 설정
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install dependencies
      working-directory: ./frontend
      run: flutter pub get

    # 환경 변수 파일 생성
    - name: Create .env file
      working-directory: ./frontend
      run: |
        echo "API_URL=${{ secrets.API_URL }}" >> .env
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
        echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
        echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env

    # Android 서명 설정
    - name: Setup Android signing
      working-directory: ./frontend/android
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > app/keystore.jks
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
        echo "storeFile=keystore.jks" >> key.properties

    # APK 빌드 (개발용)
    - name: Build APK
      working-directory: ./frontend
      if: github.ref == 'refs/heads/develop'
      run: flutter build apk --release

    # AAB 빌드 (운영용)
    - name: Build AAB
      working-directory: ./frontend
      if: github.ref == 'refs/heads/main'
      run: flutter build appbundle --release

    # 빌드 결과 업로드
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-release
        path: |
          frontend/build/app/outputs/flutter-apk/*.apk
          frontend/build/app/outputs/bundle/release/*.aab

  # ==================== iOS 빌드 ====================
  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Install dependencies
      working-directory: ./frontend
      run: flutter pub get

    # 환경 변수 파일 생성
    - name: Create .env file
      working-directory: ./frontend
      run: |
        echo "API_URL=${{ secrets.API_URL }}" >> .env
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
        echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
        echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env

    # iOS 인증서 및 프로비저닝 프로파일 설정
    - name: Setup iOS certificates
      env:
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        PROVISION_PROFILE: ${{ secrets.PROVISION_PROFILE }}
        P12_CERTIFICATE: ${{ secrets.P12_CERTIFICATE }}
      run: |
        # 키체인 생성
        security create-keychain -p "" build.keychain
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # 인증서 임포트
        echo "$P12_CERTIFICATE" | base64 -d > certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # 프로비저닝 프로파일 설치
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$PROVISION_PROFILE" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

    # iOS 빌드
    - name: Build iOS
      working-directory: ./frontend
      run: |
        flutter build ios --release --no-codesign
        
        # Xcode에서 아카이브
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath Runner.xcarchive \
          archive
          
        # IPA 생성
        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath . \
          -exportOptionsPlist ExportOptions.plist

    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-release
        path: frontend/ios/*.ipa

  # ==================== 웹 빌드 및 배포 ====================
  build-web:
    name: Build and Deploy Web
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Install dependencies
      working-directory: ./frontend
      run: flutter pub get

    # 환경 변수 파일 생성
    - name: Create .env file
      working-directory: ./frontend
      run: |
        echo "API_URL=${{ secrets.WEB_API_URL }}" >> .env
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
        echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
        echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env

    # 웹 빌드
    - name: Build web
      working-directory: ./frontend
      run: flutter build web --release --web-renderer canvaskit

    # AWS S3에 업로드
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # S3 동기화
    - name: Deploy to S3
      run: |
        if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          BUCKET="${{ secrets.DEV_S3_BUCKET }}"
          CLOUDFRONT_ID="${{ secrets.DEV_CLOUDFRONT_ID }}"
        else
          BUCKET="${{ secrets.PROD_S3_BUCKET }}"
          CLOUDFRONT_ID="${{ secrets.PROD_CLOUDFRONT_ID }}"
        fi
        
        # S3에 파일 업로드
        aws s3 sync frontend/build/web/ s3://$BUCKET/ --delete \
          --cache-control "public,max-age=31536000,immutable" \
          --exclude "*.html" \
          --exclude "service-worker.js"
        
        # HTML과 service worker는 캐시 안함
        aws s3 sync frontend/build/web/ s3://$BUCKET/ \
          --cache-control "public,max-age=0,must-revalidate" \
          --include "*.html" \
          --include "service-worker.js"
        
        # CloudFront 캐시 무효화
        aws cloudfront create-invalidation \
          --distribution-id $CLOUDFRONT_ID \
          --paths "/*"

  # ==================== 모바일 앱 배포 ====================
  deploy-mobile:
    name: Deploy Mobile Apps
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Android 배포 (Google Play Store)
    - name: Download Android artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-release
        path: ./android-release

    - name: Deploy to Google Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.peoplejob.frontend
        releaseFiles: android-release/bundle/release/*.aab
        track: internal
        status: completed

    # iOS 배포 (App Store Connect)
    - name: Download iOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: ios-release
        path: ./ios-release

    - name: Deploy to App Store Connect
      env:
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        # xcrun altool을 사용한 업로드
        xcrun altool --upload-app \
          --type ios \
          --file ios-release/*.ipa